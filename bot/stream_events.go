package bot

import (
	"github.com/callummance/nazuna/messages"
	"github.com/callummance/nia/guildmodels"
	"github.com/sirupsen/logrus"
)

//HandleTwitchStreamOffline handles a streamoffline event generated by the Twitch EventSub API
func (b *NiaBot) HandleTwitchStreamOffline(e *messages.StreamOfflineEvent) {
	//Lookup which member(s) have this stream registered for them
	connectionLookup := guildmodels.MemberConnections{
		TwitchConnection: &guildmodels.TwitchConnectionData{
			TwitchUID: e.BroadcasterUID,
		},
	}
	matchingMembers, err := b.DBConnection.GetMemberByConnection(connectionLookup)
	if err != nil {
		logrus.Errorf("Failed to fetch members for streamoffline event %v due to error %v", e, err)
	}
	//Lookup any relevant role assignments in each members' guild
	guildUpdates := make(map[string][]string) //Maps each guild to a slice of userIDs which need to be updated
	for _, member := range matchingMembers {
		guildUpdates[member.GuildID] = append(guildUpdates[member.GuildID], member.UserID)
	}
	for guild, members := range guildUpdates {
		roles, err := b.DBConnection.LookupNowLiveRoles(guild)
		if err != nil {
			logrus.Errorf("Failed to lookup roles for guild %v when responding to event %v due to error %v", guild, e, err)
		}
		for _, role := range roles {
			//For each role, iterate through affected members and unassign the role
			for _, member := range members {
				logrus.Infof("Removing role %v for user %v as they have gone offline on twitch.", role, member)
				err := b.DiscordSession().GuildMemberRoleRemove(guild, member, role.RoleID)
				if err != nil {
					logrus.Errorf("Failed to assign user id %v role %v because %v.", member, role.RoleID, err)
				}
			}
		}
	}
}

//HandleTwitchStreamOnline handles a streamonline event generated by the Twitch EventSub API
func (b *NiaBot) HandleTwitchStreamOnline(e *messages.StreamOnlineEvent) {
	//Lookup which member(s) have this stream registered for them
	connectionLookup := guildmodels.MemberConnections{
		TwitchConnection: &guildmodels.TwitchConnectionData{
			TwitchUID: e.BroadcasterUID,
		},
	}
	matchingMembers, err := b.DBConnection.GetMemberByConnection(connectionLookup)
	if err != nil {
		logrus.Errorf("Failed to fetch members for streamonline event %v due to error %v", e, err)
	}
	//Lookup any relevant role assignments in each members' guild
	guildUpdates := make(map[string][]string) //Maps each guild to a slice of userIDs which need to be updated
	for _, member := range matchingMembers {
		guildUpdates[member.GuildID] = append(guildUpdates[member.GuildID], member.UserID)
	}
	for guild, members := range guildUpdates {
		roles, err := b.DBConnection.LookupNowLiveRoles(guild)
		if err != nil {
			logrus.Errorf("Failed to lookup roles for guild %v when responding to event %v due to error %v", guild, e, err)
		}
		for _, role := range roles {
			//For each role, iterate through affected members and assign the role
			for _, member := range members {
				logrus.Infof("Adding role %v for user %v based as they have gone online on twitch.", role, member)
				err := b.DiscordSession().GuildMemberRoleAdd(guild, member, role.RoleID)
				if err != nil {
					logrus.Errorf("Failed to assign user id %v role %v because %v.", member, role.RoleID, err)
				}
			}
		}
	}
}
