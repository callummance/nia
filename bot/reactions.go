package bot

import (
	"github.com/bwmarrin/discordgo"
	"github.com/callummance/nia/guildmodels"
	"github.com/sirupsen/logrus"
)

//HandleReactionAdd recieves a MessageReaction struct generated by a MessageReactionAdd Discord gateway event
//and handles any changes that are needed.
func (b *NiaBot) HandleReactionAdd(reaction *discordgo.MessageReaction) {
	//Check if we should assign a role
	b.addReactionRole(reaction)
}

//HandleReactionRemove recieves a MessageReaction struct generated by a MessageReactionRemove Discord gateway event
//and handles any changes that need to be made.
func (b *NiaBot) HandleReactionRemove(reaction *discordgo.MessageReaction) {
	//Check if we should remove a role
	b.removeReactionRole(reaction)
}

func (b *NiaBot) addReactionRole(reaction *discordgo.MessageReaction) {
	matchingRules, _ := b.checkReactionAssociatedRole(reaction)
	if matchingRules == nil {
		return
	}
	for _, matchingRole := range matchingRules {
		logrus.Infof("Adding role %v for user %v based on their reaction.", matchingRole.RoleID, reaction.UserID)
		err := b.DiscordSession().GuildMemberRoleAdd(matchingRole.GuildID, reaction.UserID, matchingRole.RoleID)
		if err != nil {
			logrus.Errorf("Failed to assign user id %v role %v because %v.", reaction.UserID, matchingRole.RoleID, err)
			//TODO: notify admin channel
		}
		if matchingRole.RoleAssignment.ReactionRoleData.ShouldClear {
			emojiIdent := matchingRole.RoleAssignment.ReactionRoleData.EmojiID
			err := b.DiscordSession().MessageReactionRemove(reaction.ChannelID, reaction.MessageID, emojiIdent, reaction.UserID)
			if err != nil {
				logrus.Errorf("Failed to clear user %v's reaction %v to message ID %v because %v.", reaction.UserID, emojiIdent, reaction.ChannelID, err)
				//TODO: notify admin channel
			}
		}
	}
}

func (b *NiaBot) removeReactionRole(reaction *discordgo.MessageReaction) {
	matchingRules, _ := b.checkReactionAssociatedRole(reaction)
	if matchingRules == nil {
		return
	}
	for _, matchingRole := range matchingRules {
		if matchingRole.RoleAssignment.ReactionRoleData.ShouldClear {
			//If we are supposed to automatically remove reactions, does not make sense to remove role too
			continue
		}
		logrus.Infof("Removing role %v for user %v based on their reaction.", matchingRole.RoleID, reaction.UserID)
		err := b.DiscordSession().GuildMemberRoleRemove(matchingRole.GuildID, reaction.UserID, matchingRole.RoleID)
		if err != nil {
			logrus.Errorf("Failed to assign user id %v role %v because %v.", reaction.UserID, matchingRole.RoleID, err)
			//TODO: notify admin channel
		}
	}
}

func (b *NiaBot) checkReactionAssociatedRole(reaction *discordgo.MessageReaction) ([]guildmodels.ManagedRoleRule, error) {
	var emojiIdentifier string
	if reaction.Emoji.ID == "" {
		//Built in emojis don't have their own ID
		emojiIdentifier = reaction.Emoji.Name
	} else {
		emojiIdentifier = reaction.Emoji.ID
	}
	roles, err := b.DBConnection.LookupRolesByEmote(reaction.MessageID, reaction.ChannelID, reaction.GuildID, emojiIdentifier)
	if err != nil {
		logrus.Warnf("Failed to lookup role assignment by Reaction; encountered error %v", err)
		return nil, err
	}
	return roles, nil
}
